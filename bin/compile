#!/bin/bash

set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Load dependencies
source $BP_DIR/lib/output.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh

export METEOR_ALLOW_SUPERUSER=true

# Load environment
export_env_dir $ENV_DIR

# Debug: Print package.json content
echo "-----> Debug: package.json content"
cat $BUILD_DIR/package.json

# Debug: Print Node.js version
echo "-----> Debug: Node.js version from package.json"
node_version=$(cat $BUILD_DIR/package.json | grep '"node":' | tail -n 1 | awk -F'"' '{ print $4 }')
echo "Node.js version: $node_version"

echo "-----> Installing Node.js"
node_version=$(cat $BUILD_DIR/package.json | grep '"node":' | tail -n 1 | awk -F'"' '{ print $4 }')
if [ -z "$node_version" ]; then
  echo "-----> No valid Node.js version found, using default"
  node_version="14.x"
fi
install_nodejs "$BUILD_DIR" "$CACHE_DIR" "$node_version"


echo "-----> Installing Meteor"
install_meteor "$BUILD_DIR" "$CACHE_DIR"

echo "-----> Building Meteor app"
cd $BUILD_DIR
meteor build --directory .build --server-only

echo "-----> Installing dependencies"
cd .build/bundle/programs/server
npm install

echo "-----> Cleaning up"
cd $BUILD_DIR
rm -rf .meteor/local

# Create a Procfile if it doesn't exist
if [ ! -f $BUILD_DIR/Procfile ]; then
  echo "-----> Creating Procfile"
  echo "web: METEOR_ALLOW_SUPERUSER=true node .build/bundle/main.js" > $BUILD_DIR/Procfile
fi